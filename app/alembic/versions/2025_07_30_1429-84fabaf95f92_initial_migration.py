"""initial migration

Revision ID: 84fabaf95f92
Revises:
Create Date: 2025-07-30 14:29:54.742751

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '84fabaf95f92'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA family_history')
    op.create_table('user',
    sa.Column('first_name', sa.String(length=64), nullable=False),
    sa.Column('last_name', sa.String(length=64), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('password', sqlalchemy_utils.types.password.PasswordType(max_length=1024), nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email')),
    schema='family_history'
    )
    op.create_table('expenses_category',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('updated_user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['updated_user_id'], ['family_history.user.id'], name=op.f('fk_expenses_category_updated_user_id_user')),
    sa.ForeignKeyConstraint(['user_id'], ['family_history.user.id'], name=op.f('fk_expenses_category_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_expenses_category')),
    sa.UniqueConstraint('name', name=op.f('uq_expenses_category_name')),
    schema='family_history'
    )
    op.create_table('incomes_category',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('updated_user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['updated_user_id'], ['family_history.user.id'], name=op.f('fk_incomes_category_updated_user_id_user')),
    sa.ForeignKeyConstraint(['user_id'], ['family_history.user.id'], name=op.f('fk_incomes_category_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_incomes_category')),
    sa.UniqueConstraint('name', name=op.f('uq_incomes_category_name')),
    schema='family_history'
    )
    op.create_table('expenses',
    sa.Column('category_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('updated_user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['family_history.expenses_category.id'], name=op.f('fk_expenses_category_id_expenses_category')),
    sa.ForeignKeyConstraint(['updated_user_id'], ['family_history.user.id'], name=op.f('fk_expenses_updated_user_id_user')),
    sa.ForeignKeyConstraint(['user_id'], ['family_history.user.id'], name=op.f('fk_expenses_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_expenses')),
    schema='family_history'
    )
    op.create_table('income',
    sa.Column('category_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('updated_user_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['family_history.incomes_category.id'], name=op.f('fk_income_category_id_incomes_category')),
    sa.ForeignKeyConstraint(['updated_user_id'], ['family_history.user.id'], name=op.f('fk_income_updated_user_id_user')),
    sa.ForeignKeyConstraint(['user_id'], ['family_history.user.id'], name=op.f('fk_income_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_income')),
    schema='family_history'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('income', schema='family_history')
    op.drop_table('expenses', schema='family_history')
    op.drop_table('incomes_category', schema='family_history')
    op.drop_table('expenses_category', schema='family_history')
    op.drop_table('user', schema='family_history')
    op.execute('DROP SCHEMA family_history')
    # ### end Alembic commands ###
