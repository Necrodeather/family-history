"""change schema

Revision ID: 54a6efcd7243
Revises: 47ba20fe2d23
Create Date: 2025-07-28 10:20:51.708357

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '54a6efcd7243'
down_revision: Union[str, None] = '47ba20fe2d23'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA family_history')
    op.create_table(
        'user',
        sa.Column('first_name', sa.String(length=64), nullable=False),
        sa.Column('last_name', sa.String(length=64), nullable=False),
        sa.Column(
            'email',
            sqlalchemy_utils.types.email.EmailType(length=255),
            nullable=False,
        ),
        sa.Column(
            'password',
            sqlalchemy_utils.types.password.PasswordType(max_length=1024),
            nullable=False,
        ),
        sa.Column(
            'id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
        sa.UniqueConstraint('email', name=op.f('uq_user_email')),
        schema='family_history',
    )
    op.create_table(
        'expenses_category',
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column(
            'user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column(
            'updated_user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=True,
        ),
        sa.Column(
            'id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['family_history.user.id'],
            name=op.f('fk_expenses_category_updated_user_id_user'),
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['family_history.user.id'],
            name=op.f('fk_expenses_category_user_id_user'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_expenses_category')),
        sa.UniqueConstraint('name', name=op.f('uq_expenses_category_name')),
        schema='family_history',
    )
    op.create_table(
        'incomes_category',
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column(
            'user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column(
            'updated_user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=True,
        ),
        sa.Column(
            'id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['family_history.user.id'],
            name=op.f('fk_incomes_category_updated_user_id_user'),
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['family_history.user.id'],
            name=op.f('fk_incomes_category_user_id_user'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_incomes_category')),
        sa.UniqueConstraint('name', name=op.f('uq_incomes_category_name')),
        schema='family_history',
    )
    op.create_table(
        'expenses',
        sa.Column(
            'category_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column(
            'user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column(
            'updated_user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=True,
        ),
        sa.Column(
            'id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['category_id'],
            ['family_history.expenses_category.id'],
            name=op.f('fk_expenses_category_id_expenses_category'),
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['family_history.user.id'],
            name=op.f('fk_expenses_updated_user_id_user'),
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['family_history.user.id'],
            name=op.f('fk_expenses_user_id_user'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_expenses')),
        schema='family_history',
    )
    op.create_table(
        'income',
        sa.Column(
            'category_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column(
            'user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column(
            'updated_user_id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=True,
        ),
        sa.Column(
            'id',
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            nullable=False,
        ),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['category_id'],
            ['family_history.incomes_category.id'],
            name=op.f('fk_income_category_id_incomes_category'),
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['family_history.user.id'],
            name=op.f('fk_income_updated_user_id_user'),
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['family_history.user.id'],
            name=op.f('fk_income_user_id_user'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_income')),
        schema='family_history',
    )
    op.execute('DROP TABLE public.incomes_category CASCADE')
    op.execute('DROP TABLE public.user CASCADE')
    op.execute('DROP TABLE public.expenses CASCADE')
    op.execute('DROP TABLE public.expenses_category CASCADE')
    op.execute('DROP TABLE public.income CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'user',
        sa.Column(
            'first_name',
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'last_name',
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'email',
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'password',
            sqlalchemy_utils.types.password.PasswordType(max_length=1024),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id', name='pk_users'),
        sa.UniqueConstraint('email', name='uq_users_email'),
        postgresql_ignore_search_path=False,
        schema='public',
    )
    op.create_table(
        'expenses_category',
        sa.Column(
            'name', sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'updated_user_id', sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['user.id'],
            name='fk_expenses_category_updated_user_id_users',
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['user.id'], name='fk_expenses_category_user_id_users'
        ),
        sa.PrimaryKeyConstraint('id', name='pk_expenses_categories'),
        sa.UniqueConstraint('name', name='uq_expenses_categories_name'),
        postgresql_ignore_search_path=False,
        schema='public',
    )
    op.create_table(
        'expenses',
        sa.Column(
            'name', sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            'category_id', sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'amount',
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'updated_user_id', sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ['category_id'],
            ['expenses_category.id'],
            name='fk_expenses_category_id_expenses_category',
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['user.id'],
            name='fk_expenses_updated_user_id_users',
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['user.id'], name='fk_expenses_user_id_users'
        ),
        sa.PrimaryKeyConstraint('id', name='pk_expenses'),
        schema='public',
    )
    op.create_table(
        'incomes_category',
        sa.Column(
            'name', sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'updated_user_id', sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['user.id'],
            name='fk_incomes_category_updated_user_id_users',
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['user.id'], name='fk_incomes_category_user_id_users'
        ),
        sa.PrimaryKeyConstraint('id', name='pk_incomes_categories'),
        sa.UniqueConstraint('name', name='uq_incomes_categories_name'),
        schema='public',
    )
    op.create_table(
        'income',
        sa.Column(
            'name', sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            'amount',
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'category_id', sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            'updated_user_id', sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ['category_id'],
            ['incomes_category.id'],
            name='fk_incomes_category_id_incomes_category',
        ),
        sa.ForeignKeyConstraint(
            ['updated_user_id'],
            ['user.id'],
            name='fk_incomes_updated_user_id_users',
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['user.id'], name='fk_incomes_user_id_users'
        ),
        sa.PrimaryKeyConstraint('id', name='pk_incomes'),
        schema='public',
    )
    op.execute('DROP SCHEMA family_history CASCADE')
    # ### end Alembic commands ###
